                    Assignment

Q1.Given a linked list and a key ‘X‘ in, the task is to check if X is present in the linked list or not.
Ans-

class LinkedList {
   class Node {
   	int data;
   	Node next;
	    Node(int d)	{
		data = d;


		next = null;}
}
	Node head;
	// Inserts a new node at the front of the list


	public void push(int new_data)	{
		Node new_node = new Node(new_data);
		new_node.next = head;
		head = new_node;
	}
// Checks whether the value x is present in linked list
	public boolean search(Node head, int x)
	{
		Node current = head;
		while (current != null) {
			if (current.data == x)
	return true; // data found
current = current.next;

		}
		return false; // data not found
	}
	public static void main(String args[]){
		LinkedList llist = new LinkedList();
		llist.push(21);
		llist.push(22);
		llist.push(11);
		llist.push(43);
		llist.push(23);
		if (llist.search(llist.head, 21))
			System.out.println("Yes");
		else
System.out.println("No");
	}
}
OUTPUT:
14->21->11->30->10, X = 14
Yes
Explanation: 14 is present in the linked list.
6->21->17->30->10->8, X = 13
No


.Q2. Insert a node at the given position in a linked list. We are given a pointer to a node, and the new node is inserted after the given node.
Ans-

class Node {
   int data;
   Node next;
};
class LinkedList {
 Node head;
 LinkedList(){
   head = null;
 }
 //Add new element at the end of the list
 void push_back(int newElement) {
   Node newNode = new Node();
   newNode.data = newElement;
   newNode.next = null;
   if(head == null) {
     head = newNode;
   } else {
     Node temp = new Node();
     temp = head;
     while(temp.next != null)
       temp = temp.next;
     temp.next = newNode;
   }   
 }
 //Inserts a new element at the given position
 void push_at(int newElement, int position) {    
   Node newNode = new Node();
   newNode.data = newElement;
   newNode.next = null;
   if(position < 1) {
     System.out.print("\nposition should be >= 1.");
   } else if (position == 1) {
     newNode.next = head;
     head = newNode;
   } else {
     Node temp = new Node();
     temp = head;
     for(int i = 1; i < position-1; i++) {
       if(temp != null) {
         temp = temp.next;
       }     }
if(temp != null) {
       newNode.next = temp.next;
       temp.next = newNode; 
     } else {
       System.out.print("\nThe previous node is null.");
     }         }
}
 //display the content of the list
 void PrintList() {
   Node temp = new Node();
   temp = this.head;
   if(temp != null) {
     System.out.print("The list contains: ");
     while(temp != null) {
       System.out.print(temp.data + " ");
       temp = temp.next;
     }
     System.out.println();
   } else {
     System.out.println("The list is empty.");
   }
 }   
 public static void main(String[] args) {
   LinkedList MyList = new LinkedList();
   //Add three elements at the end of the list.
   MyList.push_back(3);
   MyList.push_back(6);
   MyList.push_back(5);
   MyList.PrintList();
   //Insert an element at position 2
   MyList.push_at(8, 2);
   MyList.PrintList();
   //Insert an element at position 3
   MyList.push_at(9, 3);
   MyList.PrintList();     
}
}
OUTPUT;
The list contain:3   6   5
The list contain: 3  8    6  5
The list contain: 3  8    9   6  5
 LinkedList(){
   head = null;
 }
 //Add new element at the end of the list
 void push_back(int newElement) {
   Node newNode = new Node();
   newNode.data = newElement;
   newNode.next = null;
   if(head == null) {
     head = newNode;
   } else {
     Node temp = new Node();
     temp = head;
     while(temp.next != null)
       temp = temp.next;
     temp.next = newNode;
   }   
 }
 //Inserts a new element at the given position
 void push_at(int newElement, int position) {    
   Node newNode = new Node();
   newNode.data = newElement;
   newNode.next = null;
   if(position < 1) {
     System.out.print("\nposition should be >= 1.");
   } else if (position == 1) {
     newNode.next = head;
     head = newNode;
   } else {
     Node temp = new Node();
     temp = head;
     for(int i = 1; i < position-1; i++) {
       if(temp != null) {
         temp = temp.next;
       }
     }
     if(temp != null) {
       newNode.next = temp.next;
       temp.next = newNode; 
     } else {
       System.out.print("\nThe previous node is null.");
     }         }
}
 //display the content of the list
 void PrintList() {
   Node temp = new Node();
   temp = this.head;
   if(temp != null) {
     System.out.print("The list contains: ");
     while(temp != null) {
       System.out.print(temp.data + " ");
       temp = temp.next;
}
System.out.println();
   } else {
     System.out.println("The list is empty.");
   } }   
 public static void main(String[] args) {
LinkedList MyList = new LinkedList();
   //Add three elements at the end of the list.
MyList.push_back(3);
   MyList.push_back(6);
   MyList.push_back(5);
   MyList.PrintList();
   //Insert an element at position 2
   MyList.push_at(8, 2);
   MyList.PrintList();
   //Insert an element at position 3
   MyList.push_at(9, 3);
   MyList.PrintList();     
 }}



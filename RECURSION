RECURSION  ASSIGNMENT
Q1 : Given an integer, find out the sum of its digits using recursion.
Input: n= 1234
Ans

import java.io.*;




import java.util.*;










public class Main


{ static int func(int n)


{


if (n == 0)


return 0;


return (n % 10 + func(n / 10));


}


	public static void main(String[] args) {


		System.out.println("Enter the number");


		Scanner sc = new Scanner(System.in);


		int n=sc.nextInt();


		int ans = func(n);


		System.out.println(" Sum of digits in " + n


+ " is " + ans );


	}


}

Q2: Given a number n. Find the sum of natural numbers till n but with alternate signs.
That means if n = 5 then you have to return 1-2+3-4+5 = 3 as your answer.
Ans-

import java.io.*;




import java.util.*;






public class Main


{ static int go(int n , int i){


if(i == n + 1)return 0;


if(i%2 == 0)return go(n , i + 1) - i;


else return go(n , i + 1) + i;


}


	public static void main(String[] args) {


	


Scanner sc = new Scanner(System.in);


int n = sc.nextInt();


System.out.println(go(n,1));










	}


}

Q3: Print the max value of the array [ 13, 1, -3, 22, 5].
Ans-

import java.io.*;




import java.util.*;


public class Main{


public static int maxValue(int arr[], int n, int idx){


if(idx == n - 1)


return arr[n - 1];


int maxOfLaterIndices = maxValue(arr, n,idx + 1);


int maxVal = Math.max(arr[idx], maxOfLaterIndices);


return maxVal;


}


public static void main(String[] args) {


int[] arr={13,1,-3,22,5};


int n=arr.length;


System.out.println("The max value is : " + maxValue(arr,n,0));


}


}

OUTPUT-The max value is: 22

Q4 : Find the sum of the values of the array [92, 23, 15, -20, 10].
Ans-
class Test {
    static int arr[] = { 92,23,15,-20,10 };
 
    // method for sum of elements in an array
    static int sum()
    {
        int sum = 0; // initialize sum
        int i;
 
        // Iterate through all elements and add them to sum
        for (i = 0; i < arr.length; i++)
            sum += arr[i];
 
        return sum;
    }
 
    // Driver method
    public static void main(String[] args)
    {
        System.out.println("Sum of given array is ",+ sum());
    }
}

OUTPUT

Sum of given array is 120


Q5. Given a number n. Print if it is an armstrong number or not. An armstrong number is a number if the sum
of every digit in that number raised to the power of total digits in that number is equal to the number.
Ans-
public class Armstrong {
    /* Function to calculate x raised to the
       power y */
    int power(int x, long y)
    {
        if (y == 0)
            return 1;
        if (y % 2 == 0)
            return power(x, y / 2) * power(x, y / 2);
        return x * power(x, y / 2) * power(x, y / 2);
    }
 
    /* Function to calculate order of the number */
    int order(int x)
    {
        int n = 0;
        while (x != 0) {
            n++;
            x = x / 10;
        }
        return n;
    }
boolean isArmstrong(int x)
    {
        // Calling order function
        int n = order(x);
        int temp = x, sum = 0;
        while (temp != 0) {
            int r = temp % 10;
            sum = sum + power(r, n);
            temp = temp / 10;
        }
 
        // If satisfies Armstrong condition
        return (sum == x);
    }
 
    // Driver Program
    public static void main(String[] args)
    {
        Armstrong ob = new Armstrong();
        int x = 153;
        System.out.println(ob.isArmstrong(x));
 x = 134;
        System.out.println(ob.isArmstrong(x));


        
    }
}


Output
Input : 153
Output : Yes
153 is an Armstrong number.
1*1*1 + 5*5*5 + 3*3*3 = 153
Iput:134
Output:No
